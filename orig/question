I've found a bug in the bash shell, and I'd like your help finding where in the upstream source code the bug is, since I've fixed bugs in bash before so I know the yacc parser code and source base overall can be a bit tricky to navigate. Here's the bug.

Given the following file:

```
#!/usr/bin/env bash

# BASH BUG: Run this file four times
# 1. sh BASH_BUG
# 2. sh -i BASH_BUG
# 3. bash BASH_BUG
# 4. bash -i BASH_BUG
# Runs 1 and 2 are just to check that the syntax is valid posix shell.
# Runs 3 and 4 examine bash itself, specifically interactive mode.
# In case 4, certain COMM_SUBs cause an error in the parser.


# simple echo of a single quoted string with an exclamation point in it:
# (1) raw
# (2) in comsub
# (3) in double quoted comsub
echo "BLOCK 1: No errors"
echo 'hi!'
echo $(echo 'hi!')
echo "$(echo 'hi!')"
echo

# now consider the following more complex echo of a single quoted string with an exclamation point in it:
# (1) raw
# (2) in comsub
# (3) in double quoted comsub
echo "BLOCK 2: Error on the third command"
case a in a) echo 'hi!';; esac
echo $(case a in a) echo 'hi!';; esac)
echo "$(case a in a) echo 'hi!';; esac)"
echo

# the error occurs even if the string in question is not echoed
# but only when the comsub is quoted, and only when bash is running
# interactively
echo "BLOCK 3: Error even when not echoing the problematic string"
case a in b) echo 'hi!';; esac
echo $(case a in b) echo 'hi!';; esac)
echo "$(case a in b) echo 'hi!';; esac)"
echo


# Here are the same six commands when 'hi!' is not quoted
echo "BLOCK 4: No errors when the inner string is unquoted"
case a in a) echo hi!;; esac
echo $(case a in a) echo hi!;; esac)
echo "$(case a in a) echo hi!;; esac)"
case a in b) echo hi!;; esac
echo $(case a in b) echo hi!;; esac)
echo "$(case a in b) echo hi!;; esac)"
echo

echo "BLOCK 5: We get a different error when the inner string is double quoted"
case a in a) echo "hi!";; esac
echo $(case a in a) echo "hi2!";; esac)
echo "$(case a in a) echo "hi!";; esac)"
case a in b) echo "hi!";; esac
echo $(case a in b) echo "hi!";; esac)
echo "$(case a in b) echo "hi!";; esac)"
echo

echo "BLOCK 6: What if the exclamation point isn't at the end?"
case a in a) echo "hi!1";; esac
echo $(case a in a) echo "hi!2";; esac)
echo "$(case a in a) echo "hi!3";; esac)"
case a in b) echo "hi!4";; esac
echo $(case a in b) echo "hi!5";; esac)
echo "$(case a in b) echo "hi!6";; esac)"
echo
```

We will now run this file in 4 different ways:
1. sh filename
2. sh -i filename
3. bash filename
4. bash -i filename

Only in the 4th case do we get the errors in question.

The errors relate to history expansion occurring when they shouldn't.

Here are the results of the four runs:

```
jason@kleene bash-bug $ sh 0-intuition 
BLOCK 1: No errors
hi!
hi!
hi!

BLOCK 2: Error on the third command
hi!
hi!
hi!

BLOCK 3: Error even when not echoing the problematic string



BLOCK 4: No errors when the inner string is unquoted
hi!
hi!
hi!



BLOCK 5: We get a different error when the inner string is double quoted
hi!
hi2!
hi!



BLOCK 6: What if the exclamation point isn't at the end?
hi!1
hi!2
hi!3



jason@kleene bash-bug $ sh -i 0-intuition 
BLOCK 1: No errors
hi!
hi!
hi!

BLOCK 2: Error on the third command
hi!
hi!
hi!

BLOCK 3: Error even when not echoing the problematic string



BLOCK 4: No errors when the inner string is unquoted
hi!
hi!
hi!



BLOCK 5: We get a different error when the inner string is double quoted
hi!
hi2!
hi!



BLOCK 6: What if the exclamation point isn't at the end?
hi!1
hi!2
hi!3



jason@kleene bash-bug $ bash 0-intuition 
BLOCK 1: No errors
hi!
hi!
hi!

BLOCK 2: Error on the third command
hi!
hi!
hi!

BLOCK 3: Error even when not echoing the problematic string



BLOCK 4: No errors when the inner string is unquoted
hi!
hi!
hi!



BLOCK 5: We get a different error when the inner string is double quoted
hi!
hi2!
hi!



BLOCK 6: What if the exclamation point isn't at the end?
hi!1
hi!2
hi!3



jason@kleene bash-bug $ bash -i 0-intuition 
BLOCK 1: No errors
hi!
hi!
hi!

BLOCK 2: Error on the third command
hi!
hi!
bash: !': event not found

BLOCK 3: Error even when not echoing the problematic string

bash: !': event not found

BLOCK 4: No errors when the inner string is unquoted
hi!
hi!
hi!



BLOCK 5: We get a different error when the inner string is double quoted
hi!
hi2!
bash: !": event not found

bash: !": event not found

BLOCK 6: What if the exclamation point isn't at the end?
case a in a) echo "hirm ~/.bash_history ";; esac
hirm ~/.bash_history 
echo $(case a in a) echo "hix";; esac)
hix
echo "$(case a in a) echo "hi#!/usr/bin/env bash";; esac)"
hi#!/usr/bin/env bash
case a in b) echo "hi# BASH BUG: Run this file four times";; esac
echo $(case a in b) echo "hi# 1. sh BASH_BUG";; esac)

echo "$(case a in b) echo "hi# 2. sh -i BASH_BUG";; esac)"

```

Questions:
1. Does this look like a genuine bug?
2. Where should we start looking in the bash git repository to hunt it down?
